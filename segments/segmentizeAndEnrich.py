
import pandas as pd
import numpy as np
from geopy import distance

# ********************************************************************************************************************
# (1) Determine way segments.
#     -
#     Way objects in OSM are (potentially very long) lists of nodes, what we are interested in tho are 
#     segments of ways (representing a fraction of a highway that starts and ends with a junction node, containing
#     no junction nodes beyond these two). We're using the junctionsdf generated by the sibling project to segmentize
#     our ways.

def segmentingWrapper(highwaydf, junctionsdf):

    jctids = junctionsdf['id'].values

    def getSegments(wayNodes):
        
        currSeg = []
        
        segments = []
        
        for n, node in enumerate(wayNodes):
            
            if n == (len(wayNodes) - 1):
                
                currSeg.append(node)
                
                segments.append(currSeg)
                
                return pd.Series(segments)
        
            elif (node in jctids):
                
                if (n > 0):
                
                    currSeg.append(node)
            
                    segments.append(currSeg)
            
                currSeg = [node]
            
            else:
            
                currSeg.append(node)

    highwaydf.loc[:,'segments'] = highwaydf.loc[:,'nodes'].map(getSegments)

    return highwaydf

# ********************************************************************************************************************
# (2) Unfold the segmentized way data frame.
#     -
#    Each highway now has the property 'segments', a list of lists. Let's unfold/explode this so we obtain one row per segment.

def unfold(highwaydf):

    # Zuper cool numpy solution from https://stackoverflow.com/questions/53218931/how-to-unnest-explode-a-column-in-a-pandas-dataframe
    # OMG it's so fast!!

    vals = highwaydf.segments.values.tolist()
    rs = [len(r) for r in vals]    
    ids = np.repeat(highwaydf.id, rs)

    name = np.repeat(highwaydf.name, rs)
    highway = np.repeat(highwaydf.highway, rs)
    lanes = np.repeat(highwaydf.lanes, rs)
    lanesBw = np.repeat(highwaydf['lanes:backward'], rs)

    unfoldeddf = pd.DataFrame(np.column_stack((ids, name, highway, lanes, lanesBw, np.concatenate(vals))), 
                                columns=['id','highwayname','highwaytype','highwaylanes','lanes:backward','segment_nodes_ids'])

    return unfoldeddf
    
# ********************************************************************************************************************
# (3) Map the segments' lists of node ids onto nodes' respective coordinates.
#     -
#     (highways in OSM consist in lists of nodes, which are represented as ids. Only the node objects
#     themselves contain the geospatial coordinates corresponding to node ids. Hence we need a nodesdf in order to 
#     map the highways' lists of node ids onto the node coordinates).

def coordMappingWrapper(unfoldeddf, nodecoords):

    def mapToCoords (nodeList) :
    
        coords = list(map(nodecoords.get, nodeList))
        
        lats, lons = zip(*coords)
            
        return lats, lons

    unfoldeddf.loc[:,'coords'] = unfoldeddf.loc[:,'segment_nodes_ids'].map(mapToCoords)

    lats = unfoldeddf.loc[:,'coords'].map(lambda x: (list(x[0])))
    lons = unfoldeddf.loc[:,'coords'].map(lambda x: (list(x[1])))

    unfoldeddf.loc[:,'lats'], unfoldeddf.loc[:,'lons'] = lats, lons

    return unfoldeddf

# ********************************************************************************************************************
# (4) Assign each segment its length.

def distAssignmentWrapper(unfoldeddf):

    def getDist(coords):
    
        lastIdx = len(coords) - 1
        
        first = (coords[0][0], coords[1][0])
        
        last = (coords[0][lastIdx], coords[1][lastIdx])
        
        return distance.distance(last,first).km * 1000

    unfoldeddf.loc[:,'seg_length'] = unfoldeddf.loc[:,'coords'].map(getDist)

    return unfoldeddf

# ********************************************************************************************************************
# (0) Call all the functions in this script in logical order.

def metaFunc(highwaydf, junctionsdf, nodecoords):

    segmentedDf = segmentingWrapper(highwaydf, junctionsdf)

    unfoldeddf = unfold(segmentedDf)

    unfoldeddf_nodeCoords = coordMappingWrapper(unfoldeddf, nodecoords)

    unfoldeddf_segLength = distAssignmentWrapper(unfoldeddf_nodeCoords)

    return unfoldeddf_segLength